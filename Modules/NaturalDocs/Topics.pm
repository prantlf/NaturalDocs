###############################################################################
#
#   Package: NaturalDocs::Topics
#
###############################################################################
#
#   The topic constants and functions to convert them to and from strings used throughout the script.  All constants are exported
#   by default.
#
###############################################################################

# This file is part of Natural Docs, which is Copyright © 2003-2004 Greg Valure
# Natural Docs is licensed under the GPL

use strict;
use integer;

use NaturalDocs::Topics::Type;

package NaturalDocs::Topics;

use base 'Exporter';
our @EXPORT = ( 'TOPIC_GENERAL', 'TOPIC_GENERIC', 'TOPIC_GROUP', 'TOPIC_CLASS', 'TOPIC_FILE', 'TOPIC_FUNCTION',
                          'TOPIC_VARIABLE', 'TOPIC_PROPERTY', 'TOPIC_TYPE', 'TOPIC_CONSTANT' );



###############################################################################
# Group: Types


#
#   Type: TopicType
#
#   A string representing a topic type as defined in <Topics.txt>.  It's format should be treated as opaque; use <MakeTopicType()>
#   to get them from topic names.  However, they can be compared for equality with string functions.
#


#
#   Constants: Default TopicTypes
#
#   Exported constants of the default <TopicTypes>, so you don't have to go through <TypeFromName()> every time.
#
#   TOPIC_GENERAL - The general <TopicType>, which has the special meaning of none in particular.
#   TOPIC_GENERIC - Generic <TopicType>.
#   TOPIC_GROUP - Group <TopicType>.
#   TOPIC_CLASS - Class <TopicType>.
#   TOPIC_FILE - File <TopicType>.
#   TOPIC_SECTION - Section <TopicType>.
#   TOPIC_FUNCTION - Function <TopicType>.
#   TOPIC_VARIABLE - Variable <TopicType>.
#   TOPIC_PROPERTY - Property <TopicType>.
#   TOPIC_TYPE - Type <TopicType>.
#   TOPIC_CONSTANT - Constant <TopicType>.
#
use constant TOPIC_GENERAL => 'general';
use constant TOPIC_GENERIC => 'generic';
use constant TOPIC_GROUP => 'group';
use constant TOPIC_CLASS => 'class';
use constant TOPIC_FILE => 'file';
use constant TOPIC_SECTION => 'section';
use constant TOPIC_FUNCTION => 'function';
use constant TOPIC_VARIABLE => 'variable';
use constant TOPIC_PROPERTY => 'property';
use constant TOPIC_TYPE => 'type';
use constant TOPIC_CONSTANT => 'constant';
# Dependency: These constants must be checked for existence in Load().
# Dependency: The values of these constants must match what is generated by MakeTopicType().




###############################################################################
# Group: Variables


#
#   hash: types
#
#   A hashref that maps <TopicTypes> to <NaturalDocs::Topics::Type>s.
#
my %types;


#
#   hash: names
#
#   A hashref that maps various forms of the all-lowercase type names to <TopicTypes>.  All are in the same hash because
#   two names that reduce to the same thing it would cause big problems, and we need to catch that.  Keys include
#
#   - Topic names
#   - Plural topic names
#   - Alphanumeric-only topic names
#   - Alphanumeric-only plural topic names
#
my %names;


#
#   hash: keywords
#
#   A hashref that maps all-lowercase keywords to their <TopicTypes>.  Must not have any of the same keys as
#   <pluralKeywords>.
#
my %keywords;


#
#   hash: pluralKeywords
#
#   A hashref that maps all-lowercase plural keywords to their <TopicTypes>.  Must not have any of the same keys as
#   <keywords>.
#
my %pluralKeywords;


#
#   hash: indexable
#
#   An existence hash of all the indexable <TopicTypes>.
#
my %indexable;


#
#   array: legacyTypes
#
#   An array that converts the legacy topic types, which were numeric constants prior to 1.3, to the current <TopicTypes>.
#   The legacy types are used as an index into the array.  Note that this does not support list type values.
#
my @legacyTypes = ( TOPIC_GENERAL, TOPIC_CLASS, TOPIC_SECTION, TOPIC_FILE, TOPIC_GROUP, TOPIC_FUNCTION,
                                TOPIC_VARIABLE, TOPIC_GENERIC, TOPIC_TYPE, TOPIC_CONSTANT, TOPIC_PROPERTY );



###############################################################################
# Group: Files


#
#   File: Topics.txt
#
#   The configuration file that defines or overrides the topic definitions for Natural Docs.  One version sits in Natural Docs'
#   configuration directory, and another can be in a project directory to add to or override them.
#
#   > # [comments]
#
#   Everything after a # symbol is ignored.
#
#   Except when specifying topic names, everything below is case-insensitive.
#
#   > Format: [version]
#
#   Specifies the file format version of the file.
#
#
#   Sections:
#
#       > Topic Type: [name]
#       > Alter Topic Type: [name]
#
#       Starts a topic type section.  The name can only contain <CFChars> and isn't case sensitive for matching, but the original
#       case is remembered for presentation.  The section continues until another topic type section, a topic keyword section, or
#       the end of the file.
#
#       Alter Topic Type is used to override existing topic type settings.  It's done so that users cannot accidentally override
#       existing topic types.
#
#       The name General is reserved.  The following default types must be defined in the main file: Generic, Group, Class, File,
#       Section, Function, Variable, Property, Type, and Constant.  The default types can have their keywords or behaviors
#       changed, though, either by editing the default file or by overriding them in the user file.
#
#       > Keywords: [topic type]
#
#       Starts a topic keyword section.  The name must correspond to a previously defined topic type.  It cannot be General.
#
#
#   Topic Type Sections:
#
#       > Plural: [name]
#
#       Specifies the plural name of the topic type.  Defaults to the signular name.  Has the same restrictions as the topic type
#       name.
#
#       > Index: [yes|no]
#
#       Whether the topic type gets an index.  Defaults to no.
#
#       > Scope: [normal|start|end|always global]
#
#       How the topic affects scope.  Defaults to normal.
#
#       normal - The topic stays within the current scope.
#       start - The topic starts a new scope for all the topics beneath it, like class topics.
#       end - The topic resets the scope back to global for all the topics beneath it, like section topics.
#       always global - The topic is defined as a global symbol, but does not change the scope for any other topics.
#
#       > Page Title if First: [yes|no]
#
#       Whether the title of this topic becomes the page title if it is the first topic in a file.  Defaults to no.
#
#       > Auto Group: [yes|no|full only]
#
#       Whether this topic has groups created for it by default.  Defaults to no.
#
#       no - The topic will never be auto-grouped.
#       yes - The topic will be auto-grouped when using --autogroup full AND --autogroup basic.
#       full only - The topic will be auto-grouped when using --autogroup full but NOT --autogroup basic.
#
#
#   Topic Keyword Sections:
#
#       > [keyword]
#       > [keyword], [plural keyword]
#
#       Each line is the keyword and optionally its plural form.  Keywords can only have letters and numbers.  No punctuation or
#       spaces are allowed.  Keywords are not case sensitive.
#
#
#   Revisions:
#
#       1.3:
#
#           The initial version of this file.
#


###############################################################################
# Group: File Functions


#
#   Function: Load
#
#   Loads both the master and the project version of <Topics.txt>.
#
sub Load
    {
    my $self = shift;

    # Add the special General topic type.

    $types{::TOPIC_GENERAL()} = NaturalDocs::Topics::Type->New('General', 'General', 1, ::SCOPE_NORMAL(),
                                                                                                   ::AUTO_GROUP_NO(), undef);
    $names{'general'} = ::TOPIC_GENERAL();
    $indexable{::TOPIC_GENERAL()} = 1;
    # There are no keywords for the general topic.


    $self->LoadFile(1);  # Main

    # Dependency: All the default topic types must be checked for existence.

    # Check to see if the required types are defined.
    foreach my $name ('Generic', 'Group', 'Class', 'Section', 'File', 'Function', 'Variable', 'Property', 'Type', 'Constant')
        {
        if (!exists $names{lc($name)})
            {  NaturalDocs::ConfigFile->AddError('The ' . $name . ' topic type must be defined in the main topics file.');  };
        };

    if (NaturalDocs::ConfigFile->ErrorCount())
        {
        NaturalDocs::ConfigFile->PrintErrorsAndAnnotateFile();
        die 'There ' . (NaturalDocs::ConfigFile->ErrorCount() == 1 ? 'is an error' : 'are errors')
           . ' in ' . NaturalDocs::Project->MainTopicsFile() . "\n";
        }


    $self->LoadFile();  # User

    if (NaturalDocs::ConfigFile->ErrorCount())
        {
        NaturalDocs::ConfigFile->PrintErrorsAndAnnotateFile();
        die 'There ' . (NaturalDocs::ConfigFile->ErrorCount() == 1 ? 'is an error' : 'are errors')
           . ' in ' . NaturalDocs::Project->UserTopicsFile() . "\n";
        }
    };


#
#   Function: LoadFile
#
#   Loads a particular version of <Topics.txt>.
#
#   Parameters:
#
#       isMain - Whether the file is the main file or not.
#
sub LoadFile #(isMain)
    {
    my ($self, $isMain) = @_;

    my ($file, $status);

    if ($isMain)
        {
        $file = NaturalDocs::Project->MainTopicsFile();
        $status = NaturalDocs::Project->MainTopicsFileStatus();
        }
    else
        {
        $file = NaturalDocs::Project->UserTopicsFile();
        $status = NaturalDocs::Project->UserTopicsFileStatus();
        };

    my $version;

    if ($version = NaturalDocs::ConfigFile->Open($file))
        {
        # The format hasn't changed since the file was introduced.

        if ($status == ::FILE_CHANGED())
            {  NaturalDocs::Project->ReparseEverything();  };

        my ($keyword, $value) = NaturalDocs::ConfigFile->GetLine();

        while ($value)
            {
            if ($keyword eq 'topic type' || $keyword eq 'alter topic type')
                {
                my $topicTypeKeyword = $keyword;
                my $topicTypeName = $value;
                my $topicTypeObject;

                my $topicType = $self->MakeTopicType($topicTypeName);

                # Resolve conflicts and create the type if necessary.

                if ($topicTypeKeyword eq 'topic type')
                    {
                    my $lcTopicTypeName = lc($topicTypeName);

                    my $lcTopicTypeAName = $lcTopicTypeName;
                    $lcTopicTypeAName =~ tr/a-z0-9//cd;

                    if (!NaturalDocs::ConfigFile->HasOnlyCFChars($topicTypeName))
                        {
                        NaturalDocs::ConfigFile->AddError('Topic names can only have ' . NaturalDocs::ConfigFile->CFCharNames() . '.');
                        }
                    elsif ($topicType eq ::TOPIC_GENERAL())
                        {
                        NaturalDocs::ConfigFile->AddError('You cannot define a General topic type.');
                        }
                    elsif (defined $types{$topicType} || defined $names{$lcTopicTypeName} || defined $names{$lcTopicTypeAName})
                        {
                        NaturalDocs::ConfigFile->AddError('Topic type ' . $topicTypeName . ' is already defined or its name is too '
                                                                         . 'similar to an existing name.  Use Alter Topic Type if you meant to override '
                                                                         . 'its settings.');
                        }
                    else
                        {
                        $topicTypeObject = NaturalDocs::Topics::Type->New($topicTypeName, $topicTypeName, undef,
                                                                                                      ::AUTO_GROUP_NO(), ::SCOPE_NORMAL(), undef);

                        $types{$topicType} = $topicTypeObject;
                        $names{$lcTopicTypeName} = $topicType;
                        $names{$lcTopicTypeAName} = $topicType;
                        };
                    }
                else # ($topicTypeKeyword eq 'alter topic type')
                    {
                    if ($topicType eq ::TOPIC_GENERAL())
                        {  NaturalDocs::ConfigFile->AddError('You cannot alter the General topic type.');  }
                    else
                        {
                        $topicTypeObject = $types{$topicType};

                        if (!defined $topicTypeObject)
                            {  NaturalDocs::ConfigFile->AddError('Topic type ' . $topicTypeName . ' doesn\'t exist.');  };
                        };
                    };

                # We continue even if there are errors so that we can find any other errors in the file as well.  We'd rather them
                # all show up at once instead of them showing up one at a time between Natural Docs runs.  So we just ignore the
                # settings if $topicTypeObject is undef.


                while ( (($keyword, $value) = NaturalDocs::ConfigFile->GetLine()) &&
                          $keyword ne 'topic type' && $keyword ne 'alter topic type' && $keyword ne 'keywords')
                    {
                    if ($keyword eq 'plural')
                        {
                        my $pluralName = $value;

                        my $lcPluralName = lc($pluralName);

                        my $lcPluralAName = $lcPluralName;
                        $lcPluralAName =~ tr/a-zA-Z0-9//cd;

                        if (!NaturalDocs::ConfigFile->HasOnlyCFChars($pluralName))
                            {
                            NaturalDocs::ConfigFile->AddError('Plural names can only have '
                                                                             . NaturalDocs::ConfigFile->CFCharNames() . '.');
                            }
                        elsif ($lcPluralAName eq 'general')
                            {
                            NaturalDocs::ConfigFile->AddError('You cannot use General as a plural name for ' . $topicTypeName . '.');
                            }
                        elsif ( (defined $names{$lcPluralName} && $names{$lcPluralName} ne $topicType) ||
                                 (defined $names{$lcPluralAName} && $names{$lcPluralAName} ne $topicType) )
                            {
                            NaturalDocs::ConfigFile->AddError($topicTypeName . "'s plural name, " . $pluralName
                                                                             . ', is already defined or is too similar to an existing name.');
                            }

                        elsif (defined $topicTypeObject)
                            {
                            $topicTypeObject->SetPluralName($pluralName);

                            $names{$lcPluralName} = $topicType;
                            $names{$lcPluralAName} = $topicType;
                            };
                        }

                    elsif ($keyword eq 'index')
                        {
                        $value = lc($value);

                        if ($value eq 'yes')
                            {
                            if (defined $topicTypeObject)
                                {
                                $topicTypeObject->SetIndex(1);
                                $indexable{$topicType} = 1;
                                };
                            }
                        elsif ($value eq 'no')
                            {
                            if (defined $topicTypeObject)
                                {
                                $topicTypeObject->SetIndex(undef);
                                delete $indexable{$topicType};
                                };
                            }
                        else
                            {
                            NaturalDocs::ConfigFile->AddError('Index lines can only be "yes" or "no".');
                            };
                        }

                    elsif ($keyword eq 'scope')
                        {
                        $value = lc($value);

                        if ($value eq 'normal')
                            {
                            if (defined $topicTypeObject)
                                {  $topicTypeObject->SetScope(::SCOPE_NORMAL());  };
                            }
                        elsif ($value eq 'start')
                            {
                            if (defined $topicTypeObject)
                                {  $topicTypeObject->SetScope(::SCOPE_START());  };
                            }
                        elsif ($value eq 'end')
                            {
                            if (defined $topicTypeObject)
                                {  $topicTypeObject->SetScope(::SCOPE_END());  };
                            }
                        elsif ($value eq 'always global')
                            {
                            if (defined $topicTypeObject)
                                {  $topicTypeObject->SetScope(::SCOPE_ALWAYS_GLOBAL());  };
                            }
                        else
                            {
                            NaturalDocs::ConfigFile->AddError('Scope lines can only be "normal", "start", "end", or "always global".');
                            };
                        }

                    elsif ($keyword eq 'page title if first')
                        {
                        $value = lc($value);

                        if ($value eq 'yes')
                            {
                            if (defined $topicTypeObject)
                                {  $topicTypeObject->SetPageTitleIfFirst(1);  };
                            }
                        elsif ($value eq 'no')
                            {
                            if (defined $topicTypeObject)
                                {  $topicTypeObject->SetPageTitleIfFirst(undef);  };
                            }
                        else
                            {
                            NaturalDocs::ConfigFile->AddError('Page Title if First lines can only be "yes" or "no".');
                            };
                        }

                    elsif ($keyword eq 'auto group')
                        {
                        $value = lc($value);

                        if ($value eq 'yes')
                            {
                            if (defined $topicTypeObject)
                                {  $topicTypeObject->SetAutoGroup(::AUTO_GROUP_YES());  };
                            }
                        elsif ($value eq 'no')
                            {
                            if (defined $topicTypeObject)
                                {  $topicTypeObject->SetAutoGroup(::AUTO_GROUP_NO());  };
                            }
                        elsif ($value eq 'full only')
                            {
                            if (defined $topicTypeObject)
                                {  $topicTypeObject->SetAutoGroup(::AUTO_GROUP_FULL_ONLY());  };
                            }
                        else
                            {
                            NaturalDocs::ConfigFile->AddError('Index lines can only be "yes" or "no".');
                            };
                        }

                    elsif (!defined $keyword)
                        {
                        NaturalDocs::ConfigFile->AddError('All lines in ' . $topicTypeKeyword . ' sections must begin with a keyword.');
                        }
                    else
                        {  NaturalDocs::ConfigFile->AddError($keyword . ' is not a valid keyword.');  };
                    };
                }

            elsif ($keyword eq 'keywords')
                {
                my $topicTypeName = $value;
                my $topicType = $names{lc($topicTypeName)};

                if (!defined $topicType)
                    {  NaturalDocs::ConfigFile->AddError($topicTypeName . ' is not a defined topic type.');  }
                elsif ($topicType eq ::TOPIC_GENERAL())
                    {
                    NaturalDocs::ConfigFile->AddError('You cannot define keywords for the General topic type.');
                    $topicType = undef;
                    };

                # We continue even if the type doesn't exist so that we can find any other errors in the file as well.  We'd rather them
                # all show up at once instead of them showing up one at a time between Natural Docs runs.  So we just ignore the
                # settings if $topicType is undef.


                while ( (($keyword, $value) = NaturalDocs::ConfigFile->GetLine()) &&
                          $keyword ne 'topic type' && $keyword ne 'alter topic type' && $keyword ne 'keywords')
                    {
                    $value = lc($value);

                    if (defined $keyword)
                        {
                        NaturalDocs::ConfigFile->AddError($keyword . ' lines are not allowed in Keywords sections.');
                        }
                    elsif ($value =~ /^([a-z0-9]+), ?([a-z0-9]+)$/)
                        {
                        if (defined $topicType)
                            {
                            $keywords{$1} = $topicType;
                            delete $pluralKeywords{$1};

                            $pluralKeywords{$2} = $topicType;
                            delete $keywords{$2};
                            };
                        }
                    elsif ($value =~ /^[a-z0-9]+$/)
                        {
                        if (defined $topicType)
                            {
                            $keywords{$value} = $topicType;
                            delete $pluralKeywords{$value};
                            };
                        }
                    else
                        {
                        NaturalDocs::ConfigFile->AddError('Keywords can only have letters and numbers.  '
                                                                         . 'Plurals must be separated by a comma.');
                        };
                    };
                }

            else
                {
                NaturalDocs::ConfigFile->AddError('The file must start with a Topic Type, Alter Topic Type, or Keywords line.');
                last;
                };
            };

        NaturalDocs::ConfigFile->Close();
        }

    else # couldn't open file
        {
        if ($isMain)
            {  die "Couldn't open topics file " . $file . "\n";  }
        else
            {  NaturalDocs::Project->ReparseEverything();  };
        };
    };



###############################################################################
# Group: Functions


#
#   Function: KeywordInfo
#
#   Returns information about a topic keyword.
#
#   Parameters:
#
#       keyword - The keyword, which may be plural.
#
#   Returns:
#
#       The array ( topicType, info, isPlural ), or an empty array if the keyword doesn't exist.
#
#       topicType - The <TopicType> of the keyword.
#       info - The <NaturalDocs::Topics::Type> of its type.
#       isPlural - Whether the keyword was plural or not.
#
sub KeywordInfo #(keyword)
    {
    my ($self, $keyword) = @_;

    $keyword = lc($keyword);

    my $type = $keywords{$keyword};

    if (defined $type)
        {  return ( $type, $types{$type}, undef );  };

    $type = $pluralKeywords{$keyword};

    if (defined $type)
        {  return ( $type, $types{$type}, 1 );  };

    return ( );
    };


#
#   Function: NameInfo
#
#   Returns information about a topic name.
#
#   Parameters:
#
#      name - The topic type name, which can be plural and/or alphanumeric only.
#
#   Returns:
#
#       The array ( topicType, info ), or an empty array if the name doesn't exist.  Note that unlike <InfoFromKeyword()>, this
#       does *not* tell you whether the name is plural or not.
#
#       topicType - The <TopicType> of the name.
#       info - The <NaturalDocs::Topics::Type> of the type.
#
sub NameInfo #(name)
    {
    my ($self, $name) = @_;

    my $type = $names{lc($name)};

    if (defined $type)
        {  return ( $type, $types{$type} );  }
    else
        {  return ( );  };
    };


#
#   Function: TypeInfo
#
#   Returns information about a <TopicType>.
#
#   Parameters:
#
#      type - The <TopicType>.
#
#   Returns:
#
#       The <NaturalDocs::Topics::Type> of the type, or undef if it didn't exist.
#
sub TypeInfo #(type)
    {
    my ($self, $type) = @_;
    return $types{$type};
    };


#
#   Function: NameOfType
#
#   Returns the name of the passed <TopicType>, or undef if it doesn't exist.
#
#   Parameters:
#
#       topicType - The <TopicType>.
#       plural - Whether to return the plural instead of the singular.
#       alphanumericOnly - Whether to strips everything but alphanumeric characters out.  Case isn't modified.
#
#   Returns:
#
#       The topic type name, according to what was specified in the parameters, or undef if it doesn't exist.
#
sub NameOfType #(topicType, plural, alphanumericOnly)
    {
    my ($self, $topicType, $plural, $alphanumericOnly) = @_;

    my $topicObject = $types{$topicType};

    if (!defined $topicObject)
        {  return undef;  };

    my $topicName = ($plural ? $topicObject->PluralName() : $topicObject->Name());

    if ($alphanumericOnly)
        {  $topicName =~ tr/a-zA-Z0-9//cd;  };

    return $topicName;
    };


#
#   Function: TypeFromName
#
#   Returns a <TopicType> for the passed topic name.
#
#   Parameters:
#
#       topicName - The name of the topic, which can be plural and/or alphanumeric only.
#
#   Returns:
#
#       The <TopicType>.  It does not specify whether the name was plural or not.
#
sub TypeFromName #(topicName)
    {
    my ($self, $topicName) = @_;

    return $names{lc($topicName)};
    };


#
#   Function: IsValidType
#
#   Returns whether the passed <TopicType> is defined.
#
sub IsValidType #(type)
    {
    my ($self, $type) = @_;
    return exists $types{$type};
    };


#
#   Function: TypeFromLegacy
#
#   Returns a <TopicType> for the passed legacy topic type integer.  <TopicTypes> were changed from integer constants to
#   strings in 1.3.
#
sub TypeFromLegacy #(legacyInt)
    {
    my ($self, $int) = @_;
    return $legacyTypes[$int];
    };


#
#   Function: AllIndexableTypes
#
#   Returns an array of all possible indexable <TopicTypes>.
#
sub AllIndexableTypes
    {
    my ($self) = @_;
    return keys %indexable;
    };


#
#   Function: ShouldAutoGroup
#
#   Returns whether the passed <TopicType> should be auto-grouped, taking into account both the <TopicType's> setting and
#   <NaturalDocs::Settings->AutoGroupLevel()>.
#
sub ShouldAutoGroup #(type)
    {
    my ($self, $type) = @_;

    my $level = NaturalDocs::Settings->AutoGroupLevel();

    if ($level == ::AUTOGROUP_NONE())
        {  return undef;  };

    my $topicLevel = $self->TypeInfo($type)->AutoGroup();

    if ($topicLevel == ::AUTO_GROUP_NO())
        {  return 0;  }
    elsif ($topicLevel == ::AUTO_GROUP_YES())
        {  return 1;  }
    elsif ($topicLevel == ::AUTO_GROUP_FULL_ONLY() && $level == ::AUTOGROUP_FULL())
        {  return 1;  }
    else
        {  return 0;  };
    };



###############################################################################
# Group: Support Functions


#
#   Function: MakeTopicType
#
#   Returns a <TopicType> for the passed topic name.  It does not check to see if it exists already.
#
#   Parameters:
#
sub MakeTopicType #(topicName)
    {
    my ($self, $topicName) = @_;

    # Dependency: The values of the default topic type constants must match what is generated here.

    # Turn everything to lowercase and strip non-alphanumeric characters.
    $topicName = lc($topicName);
    $topicName =~ tr/a-z0-9//cd;

    return $topicName;
    };



1;
